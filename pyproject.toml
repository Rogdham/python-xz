[project]
dynamic = ["version"]
name = "python-xz"
authors = [{ name = "Rogdham", email = "contact@rogdham.net" }]
description = "Pure Python implementation of the XZ file format with random access support"
readme = { file = "README.md", content-type = "text/markdown" }
keywords = ["xz", "lzma", "compression", "decompression"]
license = "MIT"
license-files = ["LICENSE.txt"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Utilities",
    "Topic :: System :: Archiving",
    "Topic :: System :: Archiving :: Compression",
]
requires-python = ">=3.9"

[project.urls]
Homepage = "https://github.com/rogdham/python-xz"
Source = "https://github.com/rogdham/python-xz"

#
# build
#

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
template = "__version__ = \"{version}\"\n"
version-file = "src/xz/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/xz"]

[tool.hatch.version]
source = "vcs"


#
# coverage
#

[tool.coverage.html]
directory = "coverage"

[tool.coverage.paths]
source = [
    "src/xz/",
    ".tox/py*/lib/python*/site-packages/xz/",
    ".tox/py*/site-packages/xz/",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if __name__ == \"__main__\":",
    "@overload",
    "if TYPE_CHECKING:",
]
show_missing = true

[tool.coverage.run]
branch = true
source = ["xz"]

#
# mypy
#

[tool.mypy]
# Import discovery
files = "src"
ignore_missing_imports = false
follow_imports = "normal"
# Platform configuration
python_version = "3.13"
# Disallow dynamic typing
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_subclassing_any = true
# Untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# None and Optional handling
no_implicit_optional = true
strict_optional = true
# Configuring warning
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
# Suppressing errors
ignore_errors = false
# Miscellaneous strictness flags
strict_equality = true
# Configuring error messages
show_error_context = true
show_error_codes = true
# Miscellaneous
warn_unused_configs = true


#
# pytest
#

[tool.pytest.ini_options]
addopts = """
    --cov
    --strict-markers
    """
filterwarnings = ["error"]
markers = ["generate_integration_files", "integration", "unit"]
testpaths = ["tests"]


#
# ruff
#

[tool.ruff]
src = ["src"]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "C901",
    "COM812",
    "D",
    "E501",
    "EM",
    "ERA001",
    "FA100",
    "PLR0912",
    "PLR0913",
    "TRY003",
    "TRY301",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "B018",
    "FBT",
    "INP001",
    "PLR0915",
    "PLR2004",
    "S101",
    "SLF001",
    "TC001",
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["xz"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"
